#!/usr/bin/env bash

# Screen resolution.
resolution="$(xdpyinfo | awk '/dimensions/{print $2}')"

# Path to 'current' cache directory.
dir="$HOME/.cache/i3lock/current"

# Wallpaper paths.
original="$dir/wall.png"
resized="$dir/resized.png"
user_image="$dir/user_image.png"

# Desktop wallpaper image paths.
dim="$dir/dim.png"
blur="$dir/blur.png"
dimblur="$dir/dimblur.png"

# Lockscreen wallpaper paths.
l_resized="$dir/l_resized.png"
l_dim="$dir/l_dim.png"
l_blur="$dir/l_blur.png"
l_dimblur="$dir/l_dimblur.png"

# Default lockscreen option values.
lock_text='Type password to unlock...'


setup_resolution_directory() {
	#
	# Setup symlink of resolution.
	# Arguments:
	#	$1 -- screen resolution.
	#

	# Create cache directory in '~/.cache/i3lock'.
	local resolution_dir="$HOME/.cache/i3lock/$1"
	mkdir -p "$resolution_dir"

	# Replace 'current' directory with forced resolution using a symlink.
	if [[ ! -d "$dir" ]] || [[ "$2" ]]; then
		rm -rf "$dir"
		ln -s "$resolution_dir" "$dir"
	fi
}


get_file() {
	#
	# Verify file is not a directory.
	# If $1 is a directory, find a file inside of it.
	# Arguments:
	#	$1 -- directory or filepath.
	#

	# Return path if not a directory.
	[[ ! -d "$1" ]] && echo "$1" && return

	# Get files in directory -> select one random file.
	files=($1/*)
	get_file "${files[RANDOM % ${#files[@]}]}"
}


prelock() {
	#
	# Commands to be ran before lockscreen has been activated.
	#

	[[ "$(pidof dunst)" ]] || pkill -u "$USER" -USR1 dunst
}


postlock() {
	#
	# Commands to be ran after the lockscreen has been deactivated.
	#

	[[ "$(pidof dunst)" ]] || pkill -u "$USER" -USR2 dunst
}


lock() {
	#
	# Run i3lock.
	# Arguments:
	# $1 -- image path
	#

	local background='00000000'
	local foreground='ffffffff'
	local letter_entered_color='d23c3dff'
	local letter_removed_color='d23c3dff'
	local password_correct='00000000'
	local password_incorrect='d23c3dff'
	i3lock \
		--tiling \
		--image "$1" \
		--timepos 'x+40:h-70' \
		--time-align 1 \
		--datestr "$lock_text" \
		--datepos 'x+43:h-45' \
		--date-align 1 \
		--insidecolor "$background" \
		--ringcolor "$foreground" \
		--line-uses-inside \
		--keyhlcolor "$letter_entered_color" \
		--bshlcolor "$letter_removed_color" \
		--separatorcolor "$background" \
		--insidevercolor "$password_correct" \
		--insidewrongcolor "$password_incorrect" \
		--ringvercolor "$foreground" \
		--ringwrongcolor "$foreground" \
		--indpos 'x+280:h-70' \
		--radius '20' \
		--ring-width 4 \
		--veriftext '' \
		--wrongtext '' \
		--verifcolor "$foreground" \
		--timecolor "$foreground" \
		--datecolor "$foreground" \
		--noinputtext '' \
		--force-clock \
		$lock_args
}


activate() {
	#
	# Activate lockscreen with desired wallpaper effect.
	# Arguments:
	#	$1 -- image effect
	#

	prelock
	case "$1" in
		dim)
			# lockscreen with dimmed background
			lock "$l_dim"
			;;

		blur)
			# set lockscreen with blurred background
			lock "$l_blur"
			;;

		dimblur)
			# set lockscreen with dimmed + blurred background
			lock "$l_dimblur"
			;;

		*)
			# default lockscreen
			lock "$l_resized"
			;;
	esac
	postlock
}


update() {
	#
	# Process image for use as the desktop or lockscreen wallpaper.
	# Arguments:
	#	$1 -- file or directory path
	#

	# Default $blur_level to 1 if not already set.
	[[ $blur_level ]] || blur_level=1

	# Get position for translucent container box.
	rectangle=" "
	res_offset="$(xrandr --query | grep -oP ' connected \K(.*?) ')"
	for res in $res_offset; do
		pos=(${res//[x+]/ })
		x="$((${pos[2]} + 25))"
		y="$((${pos[1]} - 30))"
		rectangle+="rectangle $x,$y $((x+300)),$((y-80)) "
	done

	# Verify cache directory exists or create it.
	if [[ ! -d "$dir" ]]; then
		echo "Creating '$dir' directory to cache processed images."
		mkdir -p "$dir"
	fi

	# Get filepath.
	user_input="$(get_file $1)"

	# Copy specified image to cache directory.
	cp "$user_input" "$user_image"
	if [ ! -f "$user_image" ]; then
		echo 'Please specify the path to the image you would like to use'
		exit 1
	fi

	# Copy $user_image to $original to process without ruining the image.
	cp "$user_image" "$original"
	rm "$user_image"

	# Desktop Wallpapers
	echo 'Generating various images based on the image you provided.'
	echo 'Please wait as this may take a bit...'

	# Resize
	echo 'Converting the provided image to match your resolution.'
	convert "$original" \
		-resize "$resolution""^" \
		-gravity 'center' \
		-extent "$resolution" \
		"$resized"

	# Dim
	echo 'Applying a dim effect to the image.'
	convert "$resized" -fill black -colorize 40% "$dim"

	# Blur
	echo 'Applying a blur effect to the image.'
	blur_shrink="$(echo "scale=2; 20 / $blur_level" | bc)"
	blur_sigma="$(echo "scale=2; 0.6 * $blur_level" | bc)"
	convert "$resized" \
		-filter 'Gaussian' \
		-resize "$blur_shrink%" \
		-define "filter:sigma=$blur_sigma" \
		-resize "$resolution^" \
		-gravity 'center' \
		-extent "$resolution" \
		"$blur"

	# Dimblur
	echo 'Applying the dim and blur effects to the image.'
	convert "$dim" \
		-filter 'Gaussian' \
		-resize "$blur_shrink%" \
		-define "filter:sigma=$blur_sigma" \
		-resize "$resolution^" \
		-gravity 'center' \
		-extent "$resolution" \
		"$dimblur"


	# Lockscreen Wallpapers
	echo 'Processing lockscreen wallpapers.'
	local draw_arg="fill rgba(0, 0, 0, 0.4) $rectangle"
	convert "$resized" -draw "$draw_arg" "$l_resized"
	convert "$dim" -draw "$draw_arg" "$l_dim"
	convert "$blur" -draw "$draw_arg" "$l_blur"
	convert "$dimblur" -draw "$draw_arg" "$l_dimblur"
	echo
	echo 'All images have been created.'
}


set_wallpaper() {
	#
	# Set desktop wallpaper.
	# Arguments:
	#	$1 -- image effect
	#

	local effect="$resized"

	# Select image effect.
	case "$1" in
		dim)
			effect="$dim"
			;;

		blur)
			effect="$blur"
			;;

		dimblur)
			effect="$dimblur"
			;;
	esac

	# Set desktop wallpaper.
	feh --bg-fill $effect
}


usage() {
	#
	# Show usage information.
	#

	echo 'Important: Update the image cache (e.g. betterlockscreen -u path/to/image.jpg).'
	echo '	Image cache must be updated to initially configure or update wallpaper used'
	echo
	echo
	echo 'See: https://github.com/pavanjadhaw/betterlockscreen for additional info...'
	echo
	echo
	echo 'Options:'
	echo
	echo '	-h --help'
	echo '		For help (e.g. betterlockscreen -h or betterlockscreen --help).'
	echo
	echo
	echo '	-u --update'
	echo '		to update image cache, you should do this before using any other options'
	echo '		E.g: betterlockscreen -u path/to/image.png when image.png is custom background'
	echo '		Or you can use betterlockscreen -u path/to/imagedir and a random file will be selected.'
	echo
	echo
	echo '	-l --lock'
	echo '		to lock screen (e.g. betterlockscreen -l)'
	echo '		you can also use dimmed or blurred background for lockscreen.'
	echo '		E.g: betterlockscreen -l dim (for dimmed background)'
	echo '		E.g: betterlockscreen -l blur (for blurred background)'
	echo '		E.g: betterlockscreen -l dimblur (for dimmed + blurred background)'
	echo
	echo
	echo '	-s --suspend'
	echo '		to suspend system and lock screen (e.g. betterlockscreen -s)'
	echo '		you can also use dimmed or blurred background for lockscreen.'
	echo '		E.g: betterlockscreen -s dim (for dimmed background)'
	echo '		E.g: betterlockscreen -s blur (for blurred background)'
	echo '		E.g: betterlockscreen -s dimblur (for dimmed + blurred background)'
	echo
	echo
	echo '	-w --wall'
	echo '		you can also set lockscreen background as wallpaper'
	echo '		to set wallpaper (e.g. betterlockscreen -w or betterlockscreen --wall)'
	echo '		you can also use dimmed or blurred variants.'
	echo '		E.g: betterlockscreen -w dim (for dimmed wallpaper)'
	echo '		E.g: betterlockscreen -w blur (for blurred wallpaper)'
	echo '		E.g: betterlockscreen -w dimblur (for dimmed + blurred wallpaper)'
	echo
	echo
	echo '	-r --resolution'
	echo '		to be used after -u'
	echo '		used to set a custom resolution for the image cache.'
	echo '		E.g: betterlockscreen -u path/to/image.png -r 1920x1080'
	echo '		E.g: betterlockscreen -u path/to/image.png --resolution 3840x1080'
	echo
	echo
	echo '	-b --blur'
	echo '		to be used after -u'
	echo '		used to set blur intensity. Default to 1.'
	echo '		E.g: betterlockscreen -u path/to/image.png -b 3'
	echo '		E.g: betterlockscreen -u path/to/image.png --blur 0.5'
	echo
	echo
	echo '	-t --text'
	echo '		to set custom lockscreen text (max 31 chars)'
	echo "		E.g: betterlockscreen -l dim -t \"Don't touch my machine!\""
	echo '		E.g: betterlockscreen --text "Hi, user!" -s blur'
}


empty() {
	#
	# Show information about empty arguments.
	#

	if [ -f "$l_dim" ]; then
		echo -e "\nSeems you haven't provided any arguments. See below for usage details."
	else
		echo 'Important: Update the image cache (e.g. betterlockscreen -u path/to/image.jpg).'
		echo
		echo '		Image cache must be updated to initially configure or update the wallpaper used.'
	fi

	echo
	echo 'For other sets of options and help, use the help command.'
	echo 'e.g. betterlockscreen -h or betterlockscreen --help'
	echo
	echo 'See: https://github.com/pavanjadhaw/betterlockscreen for additional info...'
}



#
# Options
#

# Check for empty argument.
[[ "$1" = '' ]] && empty && exit 1

# Initialize directories.
[[ -d "$dir" ]] || mkdir -p "$dir"
setup_resolution_directory "$resolution"

# Parse all arguments.
for arg in "$@"; do
	[[ "${arg:0:1}" = '-' ]] || continue

	case "$1" in
		# Show usage details.
		-h | --help)
			usage
			break
			;;

		# Set $run_suspend var and fall through to --lock
		-s | --suspend)
			run_suspend=true
			;&

		# Lock screen.
		-l | --lock)
			run_lock=true
			[[ "$run_suspend" ]] || lock_args+=" -n"
			[[ "${2:0:1}" = '-' ]] && shift 1 || { lock_effect="$2"; shift 2; }
			;;

		# Set desktop wallpaper.
		-w | --wall | --wallpaper)
			set_wallpaper "$2"
			shift 2
			;;

		# Update image caches.
		-u | --update)
			run_update=true
			image_path="$2"
			[[ "$image_path" ]] || { empty && exit 1; }
			shift 2
			;;

		# Force custom resolution.
		-r | --resolution)
			resolution="$2"
			setup_resolution_directory "$resolution" 'force'
			shift 2
			;;

		# Set custom blur level for processor.
		-b | --blur)
			blur_level="$2"
			shift 2
			;;

		# Set lockscreen text.
		-t | --text)
			lock_text="$2"
			shift 2
			;;

		# Leftover args to pass to i3lock.
		--)
			lock_args+=" ${@:2}"
			break
			;;

		# Invalid arguments.
		*)
			echo "Invalid argument: '$1'"
			break
			;;
	esac
done



# Run image generation.
[[ "$run_update" ]] && update "$image_path"

# Verify wallpapers exist.
[[ "$(dir $dir)" ]] || { empty && exit 1; }

# Activate lockscreen and, optionally, suspend.
[[ "$run_lock" ]] && activate "$lock_effect"
[[ "$run_suspend" ]] && systemctl suspend


exit 0
